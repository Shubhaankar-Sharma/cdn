package db

import (
	"context"
	"database/sql"
	"fmt"
)

// Store provides all functions to execute db queries and transactions
type Store struct {
	*Queries // Embedding Queries struct generated by sqlc
	db       *sql.DB
}

// NewStore Creates a New Store
func NewStore(db *sql.DB) *Store {
	return &Store{
		db:      db,
		Queries: New(db),
	}
}

// execTx executes a function in a db transaction
func (store *Store) execTx(ctx context.Context, fn func(*Queries) error) error {
	tx, err := store.db.BeginTx(ctx, nil)
	if err != nil {
		return err
	}

	q := New(tx)
	err = fn(q)
	if err != nil {
		if rbErr := tx.Rollback(); rbErr != nil { //Trying To rollback returns error as well
			return fmt.Errorf("transaction error: %v, rollback Error: %v",
				err, rbErr)
		}
		return err
	}
	return tx.Commit()
}

// CreateAssetFile Creates assets and files in a transaction so that errors can be caught
// before committing
func (store *Store) CreateAssetFile(ctx context.Context, arg CreateAssetParams) (int64, error) {
	var result int64

	err := store.execTx(ctx, func(q *Queries) error {
		var err error
		result, err = q.CreateAsset(ctx, arg)
		if err != nil {
			return err
		}
		return nil
	})
	return result, err
}
